import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler, StandardScaler, LabelEncoder
from sklearn.metrics import pairwise_distances
from scipy.spatial.distance import cosine
import statistics

#A1
def a2_q1(file_path):
    buying_data = pd.read_excel(file_path, sheet_name='Purchase data')
    matA = buying_data[['Candies (#)', 'Mangoes (Kg)', 'Milk Packets (#)']].dropna().values #drop empty values
    matC = buying_data['Payment (Rs)'].dropna().values #drop empty values
    dim = matA.shape[1] #inbuilt func
    n_vec = matA.shape[0] #inbuilt func
    rank = np.linalg.matrix_rank(matA) #inbuilt func
    A_pseudo_inv = np.linalg.pinv(matA) #inbuilt func
    matX = A_pseudo_inv @ matC 

    print("Dimensionality = : ", dim)
    print("No of vectors = ", n_vec)
    print("Rank of matA: ", rank)
    print("Cost of products:")
    print("Candies {:.2f}".format(matX[0]))
    print("Mangoes-Rs: {:.2f}".format(matX[1]))
    print("Milk Packets-Rs: {:.2f}".format(matX[2]))

#A2
def a2_q2(file_path):
    a2_q1(file_path)

#A3
def a2_q3(file_path):
    buying_data = pd.read_excel(file_path, sheet_name='Purchase data')
    buying_data['status'] = buying_data['Payment (Rs)'].apply(lambda x: "RICH" if x > 200 else "POOR")
    print(buying_data[['Payment (Rs)', 'status']].head())

#A4
def a2_q4(file_path):
    buying_data = pd.read_excel(file_path, sheet_name='IRCTC Stock Price')

    buying_data['Date'] = pd.to_datetime(buying_data['Date'])

    buying_data['Day of Week'] = buying_data['Date'].dt.day_name()

    data_of_price = buying_data.iloc[:, 3]
    mean = statistics.mean(data_of_price)
    variance = statistics.variance(data_of_price)
    print("Mean = ", mean)
    print("Variance = ", variance)

    wednesday = buying_data[buying_data['Date'].dt.day_name() == 'Wednesday']
    mean_wed = statistics.mean(wednesday['Price'])
    print(f"Wednesday mean: {mean_wed:.2f}")
    print(f"Wednesday Comparison: {mean_wed - mean:.2f}")

    apr_data = buying_data[buying_data['Date'].dt.month == 4]
    mean_apr = statistics.mean(apr_data['Price'])
    print(f"April data: {mean_apr:.2f}")
    print(f"April comparison: {mean_apr - mean:.2f}")

    chg = buying_data.iloc[:, 8]
    loss_prob = np.mean(chg < 0)
    print(f"Probability of Loss: {loss_prob:.2f}")

    wed_prof = wednesday[chg < 0].shape[0]
    total_wed = wednesday.shape[0]
    prob_wed_prof = 1 - (wed_prof / total_wed)
    print(f"Probability of Making a Profit on Wednesday: {prob_wed_prof:.2f}")

    plt.figure(figsize=(3, 3))
    plt.scatter(buying_data['Day of Week'], buying_data['Chg%'])
    plt.title('Plot')
    plt.xlabel('Day')
    plt.ylabel('Chg%')
    plt.xticks(rotation=45)
    plt.grid(True)
    plt.show()


#A5
def a2_q5(file_path):
    thyroid_data = pd.read_excel(file_path, sheet_name='thyroid0387_UCI')
    print(thyroid_data.dtypes)

    td_encoded = pd.get_dummies(thyroid_data, drop_first=True)
    print(td_encoded.head())

    numeric_summary = thyroid_data.describe()
    print(numeric_summary)

    missing_values = thyroid_data.isnull().sum() #adds if sum is null
    print(missing_values)

    numeric_columns = thyroid_data.select_dtypes(include=['float64', 'int64']).columns
    plt.figure(figsize=(4, 4))
    sns.boxplot(data=thyroid_data[numeric_columns])
    plt.title('Boxplot:')
    plt.show()

    mean = thyroid_data[numeric_columns].mean()
    std_vals = thyroid_data[numeric_columns].std()

    print("Mean: ", mean)
    print("Std values: ", std_vals)

#A6
def a2_q6(file_path):
    thyroid_data = pd.read_excel(file_path, sheet_name='thyroid0387_UCI')
    numeric_columns = thyroid_data.select_dtypes(include=['float64', 'int64']).columns
    categorical_columns = thyroid_data.select_dtypes(include=['object']).columns

    for col in numeric_columns:
        if (thyroid_data[col] - thyroid_data[col].mean()).abs().max() <= 3 * thyroid_data[col].std():
            thyroid_data[col].fillna(thyroid_data[col].mean(), inplace=True)
        else:
            thyroid_data[col].fillna(thyroid_data[col].median(), inplace=True)

    for col in categorical_columns:
        thyroid_data[col].fillna(thyroid_data[col].mode()[0], inplace=True)

    missing_values = thyroid_data.isnull().sum()
    print(missing_values)
    return thyroid_data.head()

#A7
def a2_q7(file_path):
    thyroid_data = pd.read_excel(file_path, sheet_name='thyroid0387_UCI')
    numeric_columns = thyroid_data.select_dtypes(include=[np.number]).columns

    scaler = MinMaxScaler()
    thyroid_data_normalized = thyroid_data.copy()
    thyroid_data_normalized[numeric_columns] = scaler.fit_transform(thyroid_data[numeric_columns])
    print(thyroid_data_normalized.head())

    scaler_standard = StandardScaler()
    thyroid_data_standardized = thyroid_data.copy()
    thyroid_data_standardized[numeric_columns] = scaler_standard.fit_transform(thyroid_data[numeric_columns])
    print(thyroid_data_standardized.head())

#A8
def a2_q8(file_path):
    thyroid_data = pd.read_excel(file_path, sheet_name='thyroid0387_UCI')
    binary_cols = ['FTI', 'T3', 'TSH']
    thyroid_data_withoutnan = thyroid_data[binary_cols].dropna()

    vec1 = thyroid_data_withoutnan.iloc[0].values
    vec2 = thyroid_data_withoutnan.iloc[1].values

    f00 = np.sum((vec1 == 0) & (vec2 == 0))
    f01 = np.sum((vec1 == 0) & (vec2 == 1))
    f10 = np.sum((vec1 == 1) & (vec2 == 0))
    f11 = np.sum((vec1 == 1) & (vec2 == 1))

    JC = f11 / (f01 + f10 + f11) #formula
    SMC = (f11 + f00) / (f00 + f01 + f10 + f11) #formula

    print("JC is: {:.4f}".format(JC))
    print("SMC is: {:.4f}".format(SMC))

#A9
def a2_q9(file_path):
    thyroid_data = pd.read_excel(file_path, sheet_name='thyroid0387_UCI')
    num_data = thyroid_data.select_dtypes(include=[np.number])
    
    if len(num_data) >= 2:
        vec1_full = num_data.iloc[0].values
        vec2_full = num_data.iloc[1].values

        cosine_similarity = 1 - cosine(vec1_full, vec2_full)
        print("Cosine Similarity: {:.4f}".format(cosine_similarity))
    else:
        print("Cannot find cosine sim")

#A10
def a2_q10(file_path):
    thyroid_data = pd.read_excel(file_path, sheet_name='thyroid0387_UCI')
    data_set = thyroid_data.iloc[:20]

    for c in data_set.columns:
        if data_set[c].dtype == 'object':
            le = LabelEncoder()
            data_set[c] = le.fit_transform(data_set[c].astype(str))

    data_set2 = data_set.values

    jc_sim = 1 - pairwise_distances(data_set2, metric='jaccard')
    smc_sim = 1 - pairwise_distances(data_set2, metric=lambda u, v: np.sum(u == v) / len(u))
    cosine_sim = 1 - pairwise_distances(data_set2, metric='cosine')

    plt.figure(figsize=(8, 4))
    sns.heatmap(jc_sim, annot=True, cmap='YlGn')
    plt.title('Jaccard Similarity:')
    plt.show()

    plt.figure(figsize=(8, 4))
    sns.heatmap(smc_sim, annot=True, cmap='YlGnBu')
    plt.title('Simple Matching Similarity:')
    plt.show()

    plt.figure(figsize=(8, 4))
    sns.heatmap(cosine_sim, annot=True, cmap='YlOrRd')
    plt.title('Cosine Similarity:')
    plt.show()
    
def main():
    file_path = r"C:\Users\vvmad\Downloads\5th\ML\lab\Lab Session Data.xlsx"

    a2_q1(file_path)

    a2_q2(file_path)

    a2_q3(file_path)

    a2_q4(file_path)

    a2_q5(file_path)

    a2_q6(file_path)

    a2_q7(file_path)

    a2_q8(file_path)

    a2_q9(file_path)

    a2_q10(file_path)

if __name__ == "__main__":
    main()
